services:
  users-pg-db:
    image: postgres:16
    container_name: nest-postgres-pg-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${USERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USERS_POSTGRES_DB}
    volumes:
      - users-pg-db:/var/lib/postgresql/data
    networks:
      - aye-network

  orders-pg-db:
    image: postgres:16
    container_name: orders-pg-db
    restart: always
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: ${ORDERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDERS_POSTGRES_DB}
    volumes:
      - orders-pg-db:/var/lib/postgresql/data
    networks:
      - aye-network

  products-pg-db:
    image: postgres:16
    container_name: products-pg-db
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${PRODUCTS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCTS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCTS_POSTGRES_DB}
    volumes:
      - products-pg-db:/var/lib/postgresql/data
    networks:
      - aye-network

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin

    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - aye-network
    restart: unless-stopped

  users-microservice:
    build:
      context: ./users-microservice
      dockerfile: Dockerfile
    depends_on:
      - users-pg-db
    networks:
      - aye-network
    environment:
      USERS_POSTGRES_HOST: ${USERS_POSTGRES_HOST}
      USERS_POSTGRES_PORT: ${USERS_POSTGRES_PORT}
      USERS_POSTGRES_USER: ${USERS_POSTGRES_USER}
      USERS_POSTGRES_PASSWORD: ${USERS_POSTGRES_PASSWORD}
      USERS_POSTGRES_DB: ${USERS_POSTGRES_DB}
      TYPEORM_CACHE_DURATION: ${TYPEORM_CACHE_DURATION}
    volumes:
      - ./users-microservice:/usr/src/app/users-microservice
      - /usr/src/app/users-microservice/node_modules
      - ./libs/dist:/usr/src/app/libs/dist
      - ./libs/node_modules:/usr/src/app/libs/node_modules
  products-microservice:
    build:
      context: ./products-microservice
      dockerfile: Dockerfile
    depends_on:
      - products-pg-db
    networks:
      - aye-network
    environment:      
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
      PRODUCTS_POSTGRES_HOST: ${PRODUCTS_POSTGRES_HOST}
      PRODUCTS_POSTGRES_PORT: ${PRODUCTS_POSTGRES_PORT}
      PRODUCTS_POSTGRES_USER: ${PRODUCTS_POSTGRES_USER}
      PRODUCTS_POSTGRES_PASSWORD: ${PRODUCTS_POSTGRES_PASSWORD}
      PRODUCTS_POSTGRES_DB: ${PRODUCTS_POSTGRES_DB}
      TYPEORM_CACHE_DURATION: ${TYPEORM_CACHE_DURATION}
    volumes:
      - ./products-microservice:/usr/src/app/products-microservice
      - /usr/src/app/products-microservice/node_modules
      - ./libs/dist:/usr/src/app/libs/dist
      - ./libs/node_modules:/usr/src/app/libs/node_modules
  orders-microservice:
    build:
      context: ./orders-microservice
      dockerfile: Dockerfile
    depends_on:
      - orders-pg-db
    networks:
      - aye-network
    environment:
      ORDERS_POSTGRES_HOST: ${ORDERS_POSTGRES_HOST}
      ORDERS_POSTGRES_PORT: ${ORDERS_POSTGRES_PORT}
      ORDERS_POSTGRES_USER: ${ORDERS_POSTGRES_USER}
      ORDERS_POSTGRES_PASSWORD: ${ORDERS_POSTGRES_PASSWORD}
      ORDERS_POSTGRES_DB: ${ORDERS_POSTGRES_DB}
      TYPEORM_CACHE_DURATION: ${TYPEORM_CACHE_DURATION}
    volumes:
      - ./products-microservice:/app
      - /app/node_modules
      - ./libs/dist:/usr/src/app/libs/dist
      - ./libs/node_modules:/usr/src/app/libs/node_modules
  auth-microservice:
    build:
      context: ./auth-microservice
      dockerfile: Dockerfile
    depends_on:
      - users-pg-db
      - users-microservice
      - my-common
    environment:
      NODE_PATH: /usr/src/app=value
    networks:
      - aye-network
    volumes:
      - ./auth-microservice:/usr/src/app/auth-microservice
      - /usr/src/app/auth-microservice/node_modules
      - ./libs/dist:/usr/src/app/libs/dist
      - ./libs/node_modules:/usr/src/app/libs/node_modules
  cart-microservice:
    build:
      context: ./cart-microservice
      dockerfile: Dockerfile
    depends_on:
      - mongo
    networks:
      - aye-network
    volumes:
      - ./cart-microservice:/app
      - /app/node_modules

  mongo:
    image: mongo
    container_name: mongo-db
    ports:
      - "27017:27017"
    networks:
      - aye-network
    volumes:
      - mongo-data:/data/db

  my-common:
    build:
      context: ./libs
      dockerfile: Dockerfile
    volumes:
      - my-common-dist:/usr/src/app/dist # bu volume sayesinde diğer uygulamlarla paylaşabileceğiz
      - my-common-modules:/usr/src/app/node_modules
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - aye-network
    depends_on:
      - users-microservice
      - auth-microservice
      - products-microservice
      - my-common
    env_file:
      - .env
      # - orders-microservice
    environment:
      NODE_PATH: /usr/src/app=value
    volumes:
      - /usr/src/app/api-gateway/node_modules
      - ./libs/dist:/usr/src/app/libs/dist
      - ./libs/node_modules:/usr/src/app/libs/node_modules
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      - aye-network


  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - aye-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-microservice:
    build:
      context: .
      dockerfile: ./notifications-microservice/Dockerfile
    depends_on:
      - kafka
    networks:
      - aye-network
    environment:
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
    volumes:
      - ./notifications-microservice:/usr/src/app/notifications-microservice
      - /usr/src/app/notifications-microservice/node_modules
      - ./libs/dist:/usr/src/app/libs/dist
      - ./libs/node_modules:/usr/src/app/libs/node_modules
  shipping-microservice:
    build:
      context: .
      dockerfile: ./shipping-microservice/Dockerfile
    depends_on:
      - kafka
    networks:
      - aye-network
    environment:
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
    volumes:
      - ./shipping-microservice:/usr/src/app/shipping-microservice
      - /usr/src/app/shipping-microservice/node_modules
      - ./libs/dist:/usr/src/app/libs/dist
      - ./libs/node_modules:/usr/src/app/libs/node_modules

  stock-microservice:
    build:
      context: .
      dockerfile: ./stock-microservice/Dockerfile
    depends_on:
      - kafka
    networks:
      - aye-network
    environment:
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
    volumes:
      - ./stock-microservice:/usr/src/app/stock-microservice
      - /usr/src/app/stock-microservice/node_modules
      - ./libs/dist:/usr/src/app/libs/dist
      - ./libs/node_modules:/usr/src/app/libs/node_modules
networks:
  aye-network:
    driver: bridge

volumes:
  users-pg-db:
  pgadmin:
  products-pg-db:
  my-common-dist:
  my-common-modules:
  orders-pg-db:
  # mongo-data:
